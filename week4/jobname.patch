Index: src/org/apache/pig/scripting/BoundScript.java
===================================================================
--- src/org/apache/pig/scripting/BoundScript.java	(revision 1785219)
+++ src/org/apache/pig/scripting/BoundScript.java	(working copy)
@@ -17,6 +17,7 @@
  */
 package org.apache.pig.scripting;
 
+import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.StringReader;
@@ -264,7 +265,9 @@
         LOG.info("Query to run:\n" + query);
         List<PigProgressNotificationListener> listeners = ScriptState.get().getAllListeners();
         PigContext pc = scriptContext.getPigContext();
+        String scriptName = new File(ScriptState.get().getFileName()).getName();
         ScriptState scriptState = pc.getExecutionEngine().instantiateScriptState();
+        scriptState.setFileName(scriptName);
         ScriptState.start(scriptState);
         ScriptState.get().setScript(query);
         for (PigProgressNotificationListener listener : listeners) {
@@ -271,6 +274,9 @@
             ScriptState.get().registerListener(listener);
         }
         PigServer pigServer = new PigServer(scriptContext.getPigContext(), false);
+        if (pc.getProperties().getProperty(PigContext.JOB_NAME) == null) {
+            pigServer.setJobName(scriptName);
+        }
         GruntParser grunt = new GruntParser(new StringReader(query), pigServer);
         grunt.setInteractive(false);
         try {
Index: test/org/apache/pig/test/TestScriptLanguage.java
===================================================================
--- test/org/apache/pig/test/TestScriptLanguage.java	(revision 1785219)
+++ test/org/apache/pig/test/TestScriptLanguage.java	(working copy)
@@ -31,6 +31,7 @@
 import org.apache.pig.PigRunner;
 import org.apache.pig.PigServer;
 import org.apache.pig.data.Tuple;
+import org.apache.pig.impl.PigContext;
 import org.apache.pig.scripting.ScriptEngine;
 import org.apache.pig.tools.pigstats.OutputStats;
 import org.apache.pig.tools.pigstats.PigStats;
@@ -669,6 +670,59 @@
         assertFileNotExists(file1, file2);
     }
 
+    @Test
+    public void testJobName() throws Exception {
+        String[] script1 = {
+                "#!/usr/bin/python",
+                "from org.apache.pig.scripting import *",
+                "Pig.fs(\"rmr simple_out\")",
+                "input = 'simple_table'",
+                "output = 'simple_out'",
+                "P = Pig.compile(\"\"\"a = load '$input';store a into '$output';\"\"\")",
+                "Q = P.bind({'input':input, 'output':output})",
+                "stats = Q.runSingle()",
+                "if stats.isSuccessful():",
+                "\tprint 'success!'",
+                "else:",
+                "\traise 'failed'"
+        };
+        String[] input = {
+                "1\t3",
+                "2\t4",
+                "3\t5"
+        };
+
+        File script1File = Util.createInputFile("jobname1", ".py", script1);
+        Util.createLocalInputFile("simple_table", input);
+
+        PigStats stats = PigRunner.run(new String[] { "-x", Util.getLocalTestMode().toString(),
+                "-f", script1File.getAbsolutePath()}, null);
+        String jobName = stats.getAllStats().values().iterator().next().get(0).getPigProperties().getProperty(PigContext.JOB_NAME);
+        assertTrue(jobName.contains(script1File.getName()));
+
+        // set jobName manually in script
+        String[] script2 = {
+                "#!/usr/bin/python",
+                "from org.apache.pig.scripting import *",
+                "Pig.fs(\"rmr simple_out\")",
+                "input = 'simple_table'",
+                "output = 'simple_out'",
+                "P = Pig.compile(\"\"\"a = load '$input';store a into '$output';\"\"\")",
+                "P.set(\"jobName\", \"myjob\")",
+                "Q = P.bind({'input':input, 'output':output})",
+                "stats = Q.runSingle()",
+                "if stats.isSuccessful():",
+                "\tprint 'success!'",
+                "else:",
+                "\traise 'failed'"
+        };
+        File script2File = Util.createInputFile("jobname2", ".py", script2);
+        stats = PigRunner.run(new String[] { "-x", Util.getLocalTestMode().toString(),
+                "-f", script2File.getAbsolutePath()}, null);
+        jobName = stats.getAllStats().values().iterator().next().get(0).getPigProperties().getProperty(PigContext.JOB_NAME);
+        assertTrue(jobName.contains("myjob"));
+    }
+
     private void createEmptyFiles(String... filenames) throws IOException {
         for (String file : filenames) {
             Util.createInputFile(cluster, file, new String[]{""});
